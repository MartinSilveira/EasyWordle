- Clean the code
- Comment the code
- Turn code into functions
- Remove extra files
- See word by word in words_to_fix how i can improve the algorithm
- Automate testing weights
- Do new probs.txt finder and see if the solve rate improves with the original version of probs.txt compared to the current one
- Automate everything so that if it's the first time running the program, it finds the new probs and most probable words, does a new stats file, etc 
- Make a Graphical User Interface



if it's like attempt 5 and there's still more than X words (X could be like 3), then in that attempt
he does that thing where it tries to include 2 or 3 extra letters in a word and the rest can be used letters (green or yellow ones especially)
and hopes to remove the wrong letters or get the right ones in the last attempt


Examples of algorithm
cares
c0a0r0e2s0
ponty
p0o1n0t1y0
A este ponto ainda só tenho 2 letras verdes e 1 amarela, por isso tento outra palavra sem letras usadas
build
b0u0i0l1d0
2 letras verdes e 2 amarelas, provavelmente não consigo acertar, mas já não consigo fazer palavras sem letras usadas
ou começo a adivinhar da lista de palavras possíveis
ou escolho uma palavra apenas com as letras amarelas noutras posições que não as atuais amarelas e que pode incluir letras usadas (mas idealmente não)
neste caso, não vale a pena usar letras verdes, apenas se estritamente necessário
se não houver letras amarelas, uso tipo 3-4 letras não usadas e 1-2 usadas (isto pode ser calculado dinamicamente)





















OLD

IMPORTANT
since i have a list of the possible words, i can try to iterate through that list, find the frequency of each letter
that i still havent used, and then make a word that contains the most frequent letters and higher probability letters
(if possible, without any used letters, but if necessary, include the letters i already know are right)
check 'harry' to see better how it would work
or check 'swear'

also, in the non used letters algorithm, the word without any used letters should just include letters that are
still in the possible words, to avoid it using letters that arent even in the possible words

DONE I NEED TO FIX EVERYTHING RELATED TO PATHS

DONE make a file that keeps all constants and then import it into other files
make a file with repeated functions
turn repeated code into functions
comment and organize the code with constants

priority:
DONE do stats_updater.py 
DONE make it so that once wordle_solver is finished, it executes prob_updater.py and stats_updater.py
redo/reuse the prob_finder_w_dups.py (and without dups) into the prob_finder.py
after, dont forget to change the probability file from letter_probs_5lV2.txt to probs.txt

for testing, create a new stats file to output to (maybe stats2.txt) and duplicate stats_total.txt and name it stats_14nov.txt
to indicate those are just the stats until today's probability change
keep updating stats_total.txt but for comparison purposes, use stats2.txt and stats_14nov.txt 
(try to run 50000 iterations for stats2.txt for consistency)
then see if the probability change improved or not the stats (in particular, the success rate)

automate this comparison (meaning, the wordle_solver chooses by itself which of the probability files to use based on the old vs new success rate)
i can run multiple of these comparisons for a while and the wordle_solver will choose the best probabilities to use from that time period

test every possible weight combination from [0.00 1.00] (0% and 100%) to [1.00 0.00]
automate the new weight choosing based on the stats, just like before
best weights for most success rate will be the ones the wordle_solver chooses at the end

implement the logic of using words with every letter that hasnt been found yet